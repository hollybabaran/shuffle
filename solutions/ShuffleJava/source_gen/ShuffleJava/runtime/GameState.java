package ShuffleJava.runtime;

/*Generated by MPS */

import java.util.ArrayList;
import java.util.HashMap;
import ShuffleJava.gui_2.Console;
import java.lang.reflect.Method;
import ShuffleJava.gui_2.ShuffleFrame;

public class GameState {
  private ArrayList<Player> playerList;
  private int currentPlayer;

  public HashMap<String, CardPile> cardPiles = new HashMap<String, CardPile>();
  public HashMap<String, String> strings = new HashMap<String, String>();
  public HashMap<String, Boolean> booleans = new HashMap<String, Boolean>();
  public HashMap<String, Integer> numbers = new HashMap<String, Integer>();
  public HashMap<String, Button> buttons = new HashMap<String, Button>();

  private ArrayList<ValidMove> validMoves = new ArrayList<ValidMove>();

  private String mapMainClassName;

  private Console console;


  public GameState(String mapMainClassName) {
    playerList = new ArrayList<Player>();
    validMoves = new ArrayList<ValidMove>();
    currentPlayer = 0;
    this.mapMainClassName = mapMainClassName;
  }



  public void setConsole(Console console) {
    this.console = console;
  }



  public void setNumberPlayers(int numberPlayers) throws ShuffleException {
    console.printToConsole(Console.OutputType.INFO, numberPlayers + " players are in this game");
    if (numberPlayers < 1 || numberPlayers > 4) {
      throw new ShuffleException("Invalid number of players: " + numberPlayers);
    }
    for (int x = 0; x < numberPlayers; x++) {
      playerList.add(new Player(x, numberPlayers));
    }
  }



  public ArrayList<Player> getPlayers() {
    return playerList;
  }



  public Player player(int id) {
    // convert 1-indexed to 0-indexed hack 
    return playerList.get(id - 1);
  }



  public Player currentPlayer() {
    return playerList.get(currentPlayer);
  }



  public void incrementPlayer() {
    currentPlayer = (currentPlayer + 1) % playerList.size();
    // <node> 
  }



  public void setCurrentPlayer(int p) {
    currentPlayer = p;
  }



  public int getCurrentPlayerNumber() {
    return currentPlayer;
  }



  public HashMap whichMap(String variable) {
    if (cardPiles.get(variable) != null) {
      return cardPiles;
    } else if (strings.get(variable) != null) {
      return strings;
    } else if (booleans.get(variable) != null) {
      return booleans;
    } else if (numbers.get(variable) != null) {
      return numbers;
    } else {
      return buttons;
    }

  }



  public void clearHumanPlayerState() {
    for (CardPile cardpile : this.cardPiles.values()) {
      cardpile.clearSelection();
    }
    if (this.validMoves != null) {
      this.validMoves.clear();
    }
    for (Button button : this.buttons.values()) {
      button.setClicked(false);
    }
  }



  public ValidMove getValidMove(CardPile firstPile, CardPile secondPile, String functionName) {
    for (ValidMove v : this.validMoves) {
      if (v.getFirstPile().equals(firstPile.getName()) && v.getSecondPile().equals(secondPile.getName()) && v.getFunctionName().equals(functionName)) {
        return v;
      }
    }
    ValidMove validMove = new ValidMove(firstPile.getName(), secondPile.getName(), functionName);
    System.out.println("Create validmove");
    this.validMoves.add(validMove);
    return validMove;

  }



  public boolean isValidPileDrag(String firstPile, String secondPile) {
    for (ValidMove v : validMoves) {
      if (firstPile.equals(v.getFirstPile()) && secondPile.equals(v.getSecondPile()) && passesCheck(v.getFunctionName())) {
        return true;

      }
    }
    return false;
  }



  public void setValidMoveFlag(String firstPile, String secondPile) {
    for (ValidMove v : validMoves) {
      if (firstPile.equals(v.getFirstPile()) && secondPile.equals(v.getSecondPile())) {
        v.setMoved(true);
      }
    }
  }



  private boolean passesCheck(String function) {
    // return boolean function from mains value 
    if (function == "") {
      return true;
    }
    Boolean value = false;
    try {
      Class clas = Class.forName(mapMainClassName);
      Method method = clas.getMethod(function);
      value = ((Boolean) method.invoke(clas));
    } catch (Exception exception) {
      System.out.println("exception");
    }
    System.out.println("THE drag is passes the check:" + value);
    return value;
  }



  private void addValidMove(ValidMove v) {
    this.validMoves.add(v);
  }



  private void removeValidMove(ValidMove v) {
    this.validMoves.remove(v);
  }



  public void addHandDisplaysToFrame(ShuffleFrame frame) {

    for (int i = 0; i < playerList.size(); i++) {
      frame.getCanvas().addShuffleComponent(playerList.get(i).getHandDisplay(), i + 1, playerList.size());
    }
  }



  @Override
  public String toString() {
    return "CurrentPlayer is:" + currentPlayer + 1 + "of " + playerList.size() + " number of players";
  }
}
