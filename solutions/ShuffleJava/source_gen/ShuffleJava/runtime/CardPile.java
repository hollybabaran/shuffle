package ShuffleJava.runtime;

/*Generated by MPS */

import java.util.ArrayList;
import java.util.Collections;

public class CardPile {

  private ArrayList<Card> pile;
  private boolean faceup;
  private String name;
  private int maxSelectionSize;
  private ArrayList<Card> selection;


  private void setup(ArrayList<Card> pile, ArrayList<Card> selection, String name, Boolean faceup, int maxSelectionSize) {
    this.pile = pile;
    this.selection = selection;
    this.name = name;
    this.faceup = faceup;
    this.maxSelectionSize = maxSelectionSize;
  }



  public CardPile(String name) {
    setup(new ArrayList<Card>(), new ArrayList<Card>(), name, false, 0);
    if (name.equals("standard_deck")) {
      System.out.println("standard_deck is used for CardSet");
    }
  }



  public CardPile(CardPile cardpile) {
    ArrayList<Card> newPile = new ArrayList<Card>();
    for (Card c : cardpile.getArrayList()) {
      newPile.add(c);
    }
    setup(newPile, new ArrayList<Card>(), cardpile.name, cardpile.isFaceup(), 0);
  }



  public CardPile(ArrayList<Card> arrayList) {
    setup(arrayList, new ArrayList<Card>(), "default_cardpile_name", false, 0);
  }



  public CardPile(String name, boolean faceup) {
    setup(new ArrayList<Card>(), new ArrayList<Card>(), name, faceup, 0);
    System.out.println("New pile called " + this.name + " is created");
  }




  public String getName() {
    return this.name;
  }



  public boolean isFaceup() {
    return this.faceup;
  }




  public void add(Card card) {
    pile.add(card);
  }



  public void removeCard(Card c) {
    pile.remove(c);
  }



  public Card draw() {
    Card c;
    c = pile.get(pile.size() - 1);
    pile.remove(pile.size() - 1);
    return c;
  }



  public Card getTopCard() {
    Card c;
    c = pile.get(pile.size() - 1);
    return c;
  }



  public boolean checkCard(Card card) {
    for (Card c : pile) {
      if (c.isSameAs(card)) {
        return true;
      }
    }
    return false;
  }



  public void shuffle() {
    System.out.println(name + " is shuffled!");
    Collections.shuffle(pile);
  }



  public ArrayList<Card> getArrayList() {
    return pile;
  }



  public int size() {
    return pile.size();
  }



  public boolean isSelectable() {
    return (this.maxSelectionSize != 0 ? true : false);
  }



  public void setSelectable(boolean b) {
    if (b) {
      this.selection = new ArrayList<Card>();
      this.maxSelectionSize = pile.size();
      setCardsSelectable(true);
    } else {
      this.maxSelectionSize = 0;
      setCardsSelectable(false);
    }
  }



  public void setSelectable(int size) {
    this.selection = new ArrayList<Card>();
    this.maxSelectionSize = size;
    setCardsSelectable(true);
  }



  private void setCardsSelectable(boolean b) {
    for (Card c : this.pile) {
      c.setSelectable(b);
    }
  }



  /**
   * Adds a card to the selection card collection - this is done when the player selects a card
   */
  private void addSelection(Card card) {
    if (selection.size() < maxSelectionSize) {
      this.selection.add(card);
      card.setSelected(true);
    }
  }



  /**
   * Removes card from the selection card collection - this is done when the player unselects a card
   */
  private void removeSelection(Card card) {
    this.selection.remove(card);
    card.setSelected(false);
  }



  public void toggleSelection(int indexOfCard) {
    System.out.println("I'm trying to toggle stuff!");
    if (isSelectable() == false) {
      System.out.println("I can't toggle this shit!");
      return;
    }
    if (this.selection.contains(pile.get(indexOfCard))) {
      removeSelection(pile.get(indexOfCard));
    } else {
      addSelection(pile.get(indexOfCard));
    }
    System.out.println("selection:" + this.selection + " index:" + indexOfCard);
  }



  public ArrayList<Card> getSelection() {
    return selection;
  }



  public void clearSelection() {
    if (this.selection != null) {
      for (Card c : this.selection) {
        c.setSelected(false);
        c.setSelectable(false);
      }
      this.selection.clear();
    }
    this.maxSelectionSize = 0;
  }



  public Card getCard(int i) {
    return pile.get(i);
  }

  @Override
  public String toString() {
    String retString = name;
    // <node> 
    return retString;
  }
}
