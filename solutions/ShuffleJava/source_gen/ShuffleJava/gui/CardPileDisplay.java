package ShuffleJava.gui;

/*Generated by MPS */

import ShuffleJava.runtime.CardPile;
import javax.swing.JLabel;
import javax.swing.OverlayLayout;
import javax.swing.ImageIcon;
import java.awt.Color;
import java.awt.Graphics;
import java.awt.Dimension;
import java.util.ArrayList;
import ShuffleJava.runtime.Card;

public class CardPileDisplay extends GridCellDisplay {

  private static int CASCADE_DIV_MODIFIER = 2;
  private static int CASCADE_EMPTY_SIZE = 8;


  private CardPile pile;
  private boolean cascading = false;
  private boolean hidden = false;
  private JLabel stack;
  private JLabel empty;


  public CardPileDisplay(CardPile pile) {
    // JComponent displays either a JButton "Stack", or a JLayeredPane "Cascade" 
    this.setLayout(new OverlayLayout(this));
    this.pile = pile;

    ClassLoader classLoader1 = getClass().getClassLoader();
    this.stack = new JLabel(new ImageIcon(classLoader1.getResource("stack.png")));
    this.stack.setAlignmentX(1.0f);
    this.stack.setAlignmentY(1.0f);


    ClassLoader classLoader2 = getClass().getClassLoader();
    this.empty = new JLabel(new ImageIcon(classLoader2.getResource("nothing.png")));
    this.empty.setAlignmentX(1.0f);
    this.empty.setAlignmentY(1.0f);


    this.setBackground(new Color(21, 67, 31));

    this.add(this.empty);

  }



  public void setCascading(Boolean cascade) {
    this.cascading = cascade;
  }



  public void setHidden(Boolean hidden) {
    this.hidden = hidden;
  }



  private int getCascadeWidth(int pileSize) {
    if (pileSize == 0) {
      pileSize = CASCADE_EMPTY_SIZE;
    }
    return CardButton.DEFAULT_WIDTH * pileSize / CASCADE_DIV_MODIFIER;
  }



  public void update(Graphics g) {
    this.removeAll();
    if (this.cascading == false && this.hidden == false) {
      // stack it! 
      this.setPreferredSize(new Dimension(this.stack.getIcon().getIconWidth(), this.stack.getIcon().getIconHeight()));
      if (this.pile.size() > 0) {

        this.add(this.stack);
        this.stack.paintComponents(g);

        CardButton topcard = new CardButton(this.pile.getTopCard());
        topcard.setFaceup(this.pile.isFaceup());
        topcard.setAlignmentX(1.0f);
        topcard.setAlignmentY(1.0f);
        this.add(topcard);
        topcard.paintComponent(g);

      } else {
        this.add(this.empty);
        this.empty.paint(g);
      }
    } else if (this.cascading == false && this.hidden == false) {
      // cascade it 
      this.setPreferredSize(new Dimension(getCascadeWidth(this.pile.size()), CardButton.DEFAULT_HEIGHT));
      if (this.pile.size() > 0) {
        // casade the hand 
        ArrayList<Card> cards = pile.getArrayList();
        for (int i = 0; i < cards.size(); i++) {
          CardButton cardB = new CardButton(cards.get(i));
          cardB.setFaceup(this.pile.isFaceup());
          cardB.setAlignmentX(0.0f * i / (CASCADE_DIV_MODIFIER * cards.size()));
          cardB.setAlignmentY(0.0f);
          this.add(cardB);
          cardB.paintComponent(g);
        }

      } else {
        // hidden 
        this.setVisible(false);
      }


    }
  }



}
