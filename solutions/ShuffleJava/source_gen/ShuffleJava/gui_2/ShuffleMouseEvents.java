package ShuffleJava.gui_2;

/*Generated by MPS */

import java.awt.event.MouseAdapter;
import java.util.List;
import java.util.Map;
import ShuffleJava.runtime.GameState;
import java.awt.event.MouseEvent;
import java.awt.Component;
import java.awt.Cursor;
import ShuffleJava.runtime.CardPileUtil;
import java.awt.event.MouseWheelEvent;

public class ShuffleMouseEvents extends MouseAdapter {

  private List<ShuffleDraw> components;
  private Map<ShuffleDraw, Float[]> locations;
  private Integer[] canvasDimensions;
  private CardPileDisplay draggingPile;
  private GameState gameState;
  private boolean dragging = false;


  public ShuffleMouseEvents(List<ShuffleDraw> components, Map<ShuffleDraw, Float[]> locations, Integer[] canvasDimensions, GameState gameState) {
    this.components = components;
    this.locations = locations;
    this.canvasDimensions = canvasDimensions;
    this.gameState = gameState;
  }



  @Override
  public void mouseClicked(MouseEvent event) {
    ShuffleDraw clickedObj = figureOutWhatObject(event.getX(), event.getY());
    if (clickedObj != null) {
      int x = getAbsoluteX(canvasDimensions[0], locations.get(clickedObj)[0]);
      int y = getAbsoluteY(canvasDimensions[1], locations.get(clickedObj)[1]);
      x = event.getX() - x;
      y = event.getY() - y;
      clickedObj.click(x, y);
    }
  }

  @Override
  public void mousePressed(MouseEvent event) {
    ShuffleDraw clickedObj = figureOutWhatObject(event.getX(), event.getY());
    if (clickedObj != null) {
      if (clickedObj instanceof CardPileDisplay) {
        draggingPile = ((CardPileDisplay) clickedObj);
        dragging = true;
        ((Component) event.getSource()).setCursor(Cursor.getPredefinedCursor(Cursor.MOVE_CURSOR));
      }
    }

    super.mousePressed(event);
  }

  @Override
  public void mouseReleased(MouseEvent event) {
    if (dragging == true) {
      ShuffleDraw clickedObj = figureOutWhatObject(event.getX(), event.getY());
      if (clickedObj != null) {
        if (clickedObj instanceof CardPileDisplay) {
          CardPileDisplay dropPile = ((CardPileDisplay) clickedObj);
          if (gameState.isValidPileDrag(draggingPile.pile.getName(), dropPile.pile.getName())) {
            CardPileUtil.move(draggingPile.pile, dropPile.pile, gameState);
          }
        }
      }
    }
    ((Component) event.getSource()).setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
    dragging = false;
  }

  @Override
  public void mouseEntered(MouseEvent event) {
    super.mouseEntered(event);
  }

  @Override
  public void mouseExited(MouseEvent event) {
    super.mouseExited(event);
  }

  @Override
  public void mouseWheelMoved(MouseWheelEvent event) {
    super.mouseWheelMoved(event);
  }

  @Override
  public void mouseDragged(MouseEvent event) {
    super.mouseDragged(event);
  }

  @Override
  public void mouseMoved(MouseEvent event) {
    super.mouseMoved(event);
  }



  private boolean between(int low, int num, int high) {
    return (num > low) && num < high;
  }




  /**
   * stub out to figure out what component the mouse interacted with
   */
  private ShuffleDraw figureOutWhatObject(int x, int y) {
    for (ShuffleDraw c : components) {
      int absx = getAbsoluteX(canvasDimensions[0], locations.get(c)[0]);
      int absy = getAbsoluteY(canvasDimensions[1], locations.get(c)[1]);
      if (between(absx, x, absx + c.getWidth()) && between(absy, y, absy + c.getHeight())) {
        return c;
      }
    }
    return null;
  }



  private int getAbsoluteX(int canvasWidth, float proportionVal) {
    return (int) (proportionVal * canvasWidth);
  }



  private int getAbsoluteY(int canvasHeight, float proportionVal) {
    return (int) (proportionVal * canvasHeight);
  }




}
