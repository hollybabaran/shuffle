package ShuffleJava.gui_2;

/*Generated by MPS */

import java.awt.image.BufferedImage;
import ShuffleJava.runtime.CardPile;
import javax.imageio.ImageIO;
import java.io.IOException;
import java.awt.Graphics;
import java.awt.Color;

public class StackedPileDisplay extends CardPileDisplay implements ShuffleDraw {
  public static int STACK_WIDTH = 55;
  public static int STACK_HEIGHT = 80;

  private static int CARD_X_OFFSET = STACK_WIDTH - CardDisplay.CARD_WIDTH;
  private static int CARD_Y_OFFSET = STACK_HEIGHT - CardDisplay.CARD_HEIGHT;

  private String stackName = "stack.png";
  private String emptyName = "nothing.png";

  private BufferedImage stackImg;
  private BufferedImage emptyImg;

  private CardDisplay topCardDisplay;


  public StackedPileDisplay(CardPile pile) {
    super(pile);

    try {
      stackImg = ImageIO.read(classLoader1.getResource(this.stackName));
      emptyImg = ImageIO.read(classLoader1.getResource(this.emptyName));
    } catch (IOException e) {
      System.out.println("ERROR! StackedPileDisplay: stack or empty image file not found");
    }
    if (pile.size() > 0) {
      topCardDisplay = new CardDisplay(pile.getTopCard(), this.pile.isFaceup());
    }
  }



  private void update() {
    if (topCardDisplay == null && pile.size() > 0) {
      topCardDisplay = new CardDisplay(pile.getTopCard(), this.pile.isFaceup());
    } else if (pile.size() > 0) {
      topCardDisplay.setCard(this.pile.getTopCard());
    }
  }



  public int getWidth() {
    return STACK_WIDTH;
  }



  public int getHeight() {
    return STACK_HEIGHT;
  }




  public void draw(Graphics g, int x, int y) {
    update();
    super.draw(g, x, y);
    // <node> 
    if (this.pile.size() > 0) {
      g.drawImage(stackImg, x, y, this.bgcolour, null);
      topCardDisplay.draw(g, x + CARD_X_OFFSET, y + CARD_Y_OFFSET);
    } else {
      g.drawImage(emptyImg, x, y, this.bgcolour, null);
    }
    g.setColor(Color.LIGHT_GRAY);
    int length = pile.getName().length() * 6;
    int beginningGrid = x - ((100 - CardDisplay.CARD_WIDTH) / 2);
    int startingPoint = (100 - length) / 2;
    g.drawString(pile.getName(), beginningGrid + startingPoint, y + STACK_HEIGHT + 15);
  }




  @Override
  public int getCardIndexAt(int x, int y) {
    if (pile.size() > 0) {
      return 0;
    }
    return -1;
  }



  public void click(int x, int y) {
    pile.toggleSelection(0);
  }


}
