package ShuffleJava.gui_2;

/*Generated by MPS */

import ShuffleJava.runtime.CardPile;
import java.util.ArrayList;
import ShuffleJava.runtime.Card;
import java.awt.Graphics;
import java.awt.Color;

public class HandDisplay extends CascadingPileDisplay implements ShuffleDraw {
  private boolean isVertical;


  public HandDisplay(CardPile c, int PlayerNum) {
    super(c);
    // first two (0,1) players horizontal; 3,4 vertical 
    this.isVertical = ((PlayerNum > 1 ? true : false));
  }




  public int getWidth() {
    if (!(isVertical)) {
      return super.getWidth();
    }
    return CardDisplay.CARD_WIDTH;
  }




  public int getHeight() {
    if (!(isVertical)) {
      return super.getHeight();
    }
    int pileSize = this.pile.size();
    if (pileSize < 1) {
      pileSize = CASCADE_EMPTY_SIZE * 2;
    }
    return pileSize * CardDisplay.CARD_HEIGHT / 2;
  }



  private void update() {
    ArrayList<Card> model = this.pile.getArrayList();
    this.cards.clear();
    for (int i = 0; i < model.size(); i++) {
      this.cards.add(new CardDisplay(model.get(i), this.pile.isFaceup(), true));
    }
  }




  public void draw(Graphics g, int x, int y) {
    update();
    g.setColor(this.bgcolour);
    g.fillRect(x, y, getWidth(), getHeight());
    if (pile.size() <= 0) {
      // draw empty hand 
      g.setColor(Color.BLACK);
      g.drawRect(x, y, getWidth(), getHeight());
    } else {
      for (int i = 0; i < this.cards.size(); i++) {
        // draw cards 
        int locX = (isVertical ? x : CardDisplay.CARD_WIDTH * i + x);
        int locY = (isVertical ? CardDisplay.CARD_HEIGHT / 2 * i + y : y);
        cards.get(i).draw(g, locX, locY);
      }
    }
  }



  public void click(int x, int y) {
    for (int i = 1; i <= this.pile.size(); i++) {
      if ((x < i * CardDisplay.CARD_WIDTH && !(isVertical)) || (y < i * CardDisplay.CARD_HEIGHT / 2 && isVertical)) {
        pile.toggleSelection(i);
        break;
      }
    }
  }



}
