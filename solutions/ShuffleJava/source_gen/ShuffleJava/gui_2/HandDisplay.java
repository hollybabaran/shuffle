package ShuffleJava.gui_2;

/*Generated by MPS */

import ShuffleJava.runtime.CardPile;
import java.util.ArrayList;
import ShuffleJava.runtime.Card;
import java.awt.Graphics;
import java.awt.Color;

public class HandDisplay extends CascadingPileDisplay implements ShuffleDraw {
  private boolean isVertical;
  private int playerNum;
  private CardPile cardPile;


  public HandDisplay(CardPile c, int playerNum, int numPlayers) {
    super(c);
    this.cardPile = c;
    this.playerNum = playerNum;
    if (numPlayers > 2) {
      // clockwise from bottom: 0,1,2,3 
      this.isVertical = ((playerNum % 2 == 0 ? false : true));
    } else {
      // top and bottom 
      this.isVertical = false;
    }
  }



  public int getWidth() {
    if (!(isVertical)) {
      return super.getWidth();
    }
    return CardDisplay.CARD_WIDTH;
  }

  public int getHandSize() {
    return this.cardPile.getArrayList().size();
  }




  public int getHeight() {
    if (!(isVertical)) {
      return super.getHeight();
    }
    int pileSize = this.pile.size();
    if (pileSize < 1) {
      pileSize = CASCADE_EMPTY_SIZE * 2;
    }
    return pileSize * CardDisplay.CARD_HEIGHT / 2;
  }



  private void update() {
    ArrayList<Card> model = this.pile.getArrayList();
    this.cards.clear();
    for (int i = 0; i < model.size(); i++) {
      this.cards.add(new CardDisplay(model.get(i), this.pile.isFaceup(), true));
    }
  }




  public void draw(Graphics g, int x, int y) {
    update();
    g.setColor(this.bgcolour);
    g.fillRect(x, y, getWidth(), getHeight());
    if (pile.size() <= 0) {
      // draw empty hand 
      g.setColor(Color.BLACK);
      g.drawRect(x, y, getWidth(), getHeight());
    } else {
      for (int i = 0; i < this.cards.size(); i++) {
        // draw cards 
        int locX = (isVertical ? x : CardDisplay.CARD_WIDTH * i + x);
        int locY = (isVertical ? CardDisplay.CARD_HEIGHT / 2 * i + y : y);
        cards.get(i).draw(g, locX, locY);
      }
      g.setColor(Color.LIGHT_GRAY);
      switch (playerNum) {
        case 0:
          g.drawString("Player 1", 350, 570);
          break;
        case 1:
          if (isVertical) {
            int startingIndex = 300;
            String str = "Player 2";
            String c;
            for (int i = 0; i < str.length(); i++) {
              c = "" + str.charAt(i);
              g.drawString(c, 70, startingIndex + 15 * i);
            }
          } else {
            g.drawString("Player 2", 350, 95);

          }
          break;
        case 2:
          g.drawString("Player 3", 350, 95);
          break;
        case 3:
          int startingIndex = 300;
          String str = "Player 4";
          String c;
          for (int i = 0; i < str.length(); i++) {
            c = "" + str.charAt(i);
            g.drawString(c, 680, startingIndex + 15 * i);
          }
          break;
        default:
      }

    }
  }



  public void click(int x, int y) {
    for (int i = 1; i <= this.pile.size(); i++) {
      if ((x < i * CardDisplay.CARD_WIDTH && !(isVertical)) || (y < i * CardDisplay.CARD_HEIGHT / 2 && isVertical)) {
        pile.toggleSelection(i - 1);
        break;
      }
    }
  }



}
