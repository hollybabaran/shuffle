package UserStudy;

/*Generated by MPS */

import ShuffleJava.runtime.ShuffleException;
import ShuffleJava.runtime.Card;
import ShuffleJava.runtime.GameState;
import ShuffleJava.runtime.Printer;
import ShuffleJava.runtime.CardPile;
import ShuffleJava.runtime.CardPileUtil;
import ShuffleJava.gui.ShuffleFrame;

public class map_Main {


  public static void executeGame() throws ShuffleException {
    Card __dummyCard;
    // state variables 
    GameState gameState = new GameState();
    Printer printer = new Printer(gameState);

    // Setup Block 
    CardPile __deck = new CardPile("standard_deck");
    __deck.add( new Card ( "ace","spades" ));
    __deck.add( new Card ( "two","spades" ));
    __deck.add( new Card ( "three","spades" ));
    __deck.add( new Card ( "four","spades" ));
    __deck.add( new Card ( "five","spades" ));
    __deck.add( new Card ( "six","spades" ));
    __deck.add( new Card ( "seven","spades" ));
    __deck.add( new Card ( "eight","spades" ));
    __deck.add( new Card ( "nine","spades" ));
    __deck.add( new Card ( "ten","spades" ));
    __deck.add( new Card ( "jack","spades" ));
    __deck.add( new Card ( "queen","spades" ));
    __deck.add( new Card ( "king","spades" ));
    __deck.add( new Card ( "ace","hearts" ));
    __deck.add( new Card ( "two","hearts" ));
    __deck.add( new Card ( "three","hearts" ));
    __deck.add( new Card ( "four","hearts" ));
    __deck.add( new Card ( "five","hearts" ));
    __deck.add( new Card ( "six","hearts" ));
    __deck.add( new Card ( "seven","hearts" ));
    __deck.add( new Card ( "eight","hearts" ));
    __deck.add( new Card ( "nine","hearts" ));
    __deck.add( new Card ( "ten","hearts" ));
    __deck.add( new Card ( "jack","hearts" ));
    __deck.add( new Card ( "queen","hearts" ));
    __deck.add( new Card ( "king","hearts" ));
    __deck.add( new Card ( "ace","clubs" ));
    __deck.add( new Card ( "two","clubs" ));
    __deck.add( new Card ( "three","clubs" ));
    __deck.add( new Card ( "four","clubs" ));
    __deck.add( new Card ( "five","clubs" ));
    __deck.add( new Card ( "six","clubs" ));
    __deck.add( new Card ( "seven","clubs" ));
    __deck.add( new Card ( "eight","clubs" ));
    __deck.add( new Card ( "nine","clubs" ));
    __deck.add( new Card ( "ten","clubs" ));
    __deck.add( new Card ( "jack","clubs" ));
    __deck.add( new Card ( "queen","clubs" ));
    __deck.add( new Card ( "king","clubs" ));
    __deck.add( new Card ( "ace","diamonds" ));
    __deck.add( new Card ( "two","diamonds" ));
    __deck.add( new Card ( "three","diamonds" ));
    __deck.add( new Card ( "four","diamonds" ));
    __deck.add( new Card ( "five","diamonds" ));
    __deck.add( new Card ( "six","diamonds" ));
    __deck.add( new Card ( "seven","diamonds" ));
    __deck.add( new Card ( "eight","diamonds" ));
    __deck.add( new Card ( "nine","diamonds" ));
    __deck.add( new Card ( "ten","diamonds" ));
    __deck.add( new Card ( "jack","diamonds" ));
    __deck.add( new Card ( "queen","diamonds" ));
    __deck.add( new Card ( "king","diamonds" ));
gameState.setNumberPlayers(1);CardPile deck = new CardPile("deck", "A", Integer.parseInt("0"), false);
CardPile middlePile = new CardPile("middlePile", "A", Integer.parseInt("0"), true);

    CardPileUtil.moveAll(__deck, deck);deck.shuffle();
int RankCounter = 0;
int TryCounter = 0;
String rank = "ace";


    // Game Loop 
    while (true) {
      // Perform Player turn code 

if(RankCounter == 0){
      rank = "ace";


}
else if(RankCounter == 1){
      rank = "two";


}
else if(RankCounter == 2){
      rank = "three";


}
else if(RankCounter == 3){
      rank = "four";


}
else if(RankCounter == 4){
      rank = "five";


}
else if(RankCounter == 5){
      rank = "six";


}
else if(RankCounter == 6){
      rank = "seven";


}
else if(RankCounter == 7){
      rank = "eight";


}
else if(RankCounter == 8){
      rank = "nine";


}
else if(RankCounter == 9){
      rank = "ten";


}
else if(RankCounter == 10){
      rank = "jack";


}
else if(RankCounter == 11){
      rank = "queen";


}
else if(RankCounter == 12){
      rank = "king";


}


if(rank == deck.getTopCard().getRank()){
      
      CardPileUtil.moveAll(middlePile, deck);
      deck.shuffle();

      TryCounter = TryCounter + 1;


}
else {
      
      CardPileUtil.move(deck.getTopCard(), deck, middlePile);

}

RankCounter = RankCounter + 1;
if(RankCounter > 12){
      RankCounter = 0;


}

if(middlePile.size() == 52){
      
      CardPileUtil.move(TryCounter, middlePile, deck);
      
      CardPileUtil.move(TryCounter, deck, middlePile);
      


}



      // win condition 
      if (middlePile.size() == 52) {
        break;
      }

      // Increment currentPlayer for next turn 
      gameState.incrementPlayer();
    }

    // Game Finished 
    System.out.println("Player " + (gameState.currentPlayer().id() + 1) + " WINS!");
  }



  public static void main(String[] args) {
    try {
      ShuffleFrame frame = new ShuffleFrame();
      executeGame();
    } catch (ShuffleException e) {
      System.err.println("Game Error: " + e.getMessage());
    }
  }
}
