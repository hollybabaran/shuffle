package Crazy8s;

/*Generated by MPS */

import ShuffleJava.runtime.GameState;
import ShuffleJava.gui_2.ShuffleFrame;
import ShuffleJava.runtime.ShuffleException;
import ShuffleJava.runtime.Card;
import ShuffleJava.runtime.CardPile;
import ShuffleJava.runtime.Button;
import ShuffleJava.gui_2.ButtonDisplay;
import ShuffleJava.gui_2.StackedPileDisplay;
import ShuffleJava.gui_2.CascadingPileDisplay;
import ShuffleJava.gui_2.HiddenPileDisplay;
import ShuffleJava.gui_2.Console;
import ShuffleJava.runtime.Printer;
import ShuffleJava.runtime.CardPileUtil;
import java.util.Date;

public class map_Main {

  private static GameState gameState;
  private static ShuffleFrame frame;

  public static void executeGame() throws ShuffleException {
    Card __debug_include_Card;
    CardPile __debug_include_piledisplay;
    Button __debug_include_button;
    ButtonDisplay __debug_iclude_BD;
    StackedPileDisplay __debug_include_SPD;
    CascadingPileDisplay __debug_include_CPD;
    HiddenPileDisplay __debug_include_HPD;
    Console.OutputType __debug_include_OT;

    gameState = new GameState(map_Main.class.getName());
    frame = new ShuffleFrame(gameState);
    gameState.setConsole(frame.console);

    // state variables 

    Printer printer = new Printer(gameState);

    // Setup Block 

    CardPile __deck = new CardPile("standard_deck");
    __deck.add( new Card ( 1,1 ));
    __deck.add( new Card ( 2,1 ));
    __deck.add( new Card ( 3,1 ));
    __deck.add( new Card ( 4,1 ));
    __deck.add( new Card ( 5,1 ));
    __deck.add( new Card ( 6,1 ));
    __deck.add( new Card ( 7,1 ));
    __deck.add( new Card ( 8,1 ));
    __deck.add( new Card ( 9,1 ));
    __deck.add( new Card ( 10,1 ));
    __deck.add( new Card ( 11,1 ));
    __deck.add( new Card ( 12,1 ));
    __deck.add( new Card ( 13,1 ));
    __deck.add( new Card ( 1,2 ));
    __deck.add( new Card ( 2,2 ));
    __deck.add( new Card ( 3,2 ));
    __deck.add( new Card ( 4,2 ));
    __deck.add( new Card ( 5,2 ));
    __deck.add( new Card ( 6,2 ));
    __deck.add( new Card ( 7,2 ));
    __deck.add( new Card ( 8,2 ));
    __deck.add( new Card ( 9,2 ));
    __deck.add( new Card ( 10,2 ));
    __deck.add( new Card ( 11,2 ));
    __deck.add( new Card ( 12,2 ));
    __deck.add( new Card ( 13,2 ));
    __deck.add( new Card ( 1,3 ));
    __deck.add( new Card ( 2,3 ));
    __deck.add( new Card ( 3,3 ));
    __deck.add( new Card ( 4,3 ));
    __deck.add( new Card ( 5,3 ));
    __deck.add( new Card ( 6,3 ));
    __deck.add( new Card ( 7,3 ));
    __deck.add( new Card ( 8,3 ));
    __deck.add( new Card ( 9,3 ));
    __deck.add( new Card ( 10,3 ));
    __deck.add( new Card ( 11,3 ));
    __deck.add( new Card ( 12,3 ));
    __deck.add( new Card ( 13,3 ));
    __deck.add( new Card ( 1,4 ));
    __deck.add( new Card ( 2,4 ));
    __deck.add( new Card ( 3,4 ));
    __deck.add( new Card ( 4,4 ));
    __deck.add( new Card ( 5,4 ));
    __deck.add( new Card ( 6,4 ));
    __deck.add( new Card ( 7,4 ));
    __deck.add( new Card ( 8,4 ));
    __deck.add( new Card ( 9,4 ));
    __deck.add( new Card ( 10,4 ));
    __deck.add( new Card ( 11,4 ));
    __deck.add( new Card ( 12,4 ));
    __deck.add( new Card ( 13,4 ));
gameState.setNumberPlayers(4);__deck.shuffle();

    CardPileUtil.move(8, __deck, gameState.player(1).hand());
    CardPileUtil.move(8, __deck, gameState.player(2).hand());
    CardPileUtil.move(8, __deck, gameState.player(3).hand());
    CardPileUtil.move(8, __deck, gameState.player(4).hand());CardPile deck = new CardPile("deck", false);
StackedPileDisplay deck_disp = new StackedPileDisplay(deck);
frame.getCanvas().addShuffleComponent(deck_disp,"E",1);
gameState.cardPiles.put("deck",deck);
CardPile middlePile = new CardPile("middlePile", true);
StackedPileDisplay middlePile_disp = new StackedPileDisplay(middlePile);
frame.getCanvas().addShuffleComponent(middlePile_disp,"E",2);
gameState.cardPiles.put("middlePile",middlePile);
CardPile topCardPile = new CardPile("topCardPile", true);
HiddenPileDisplay topCardPile_disp = new HiddenPileDisplay(topCardPile);
frame.getCanvas().addShuffleComponent(topCardPile_disp,"B",3);
gameState.cardPiles.put("topCardPile",topCardPile);

    CardPileUtil.move(1, __deck, gameState.cardPiles.get("middlePile")
);
    CardPileUtil.moveAll(__deck, gameState.cardPiles.get("deck")
);gameState.cardPiles.get("middlePile")
.setSelectable(true);
gameState.cardPiles.get("deck")
.setSelectable(1);


int currentSuit = gameState.cardPiles.get("middlePile")
.getTopCard().getSuitInt();
gameState.numbers.put("currentSuit",gameState.cardPiles.get("middlePile")
.getTopCard().getSuitInt());
int currentRank = gameState.cardPiles.get("middlePile")
.getTopCard().getRankInt();
gameState.numbers.put("currentRank",gameState.cardPiles.get("middlePile")
.getTopCard().getRankInt());



    gameState.addHandDisplaysToFrame(frame);

    // make hand displays from player hands  

    frame.redraw();

    // Game Loop 

    while (true) {
      // Perform Player turn code 

      if (gameState.currentPlayer().isHuman()) {
        // human player code 
gameState.cardPiles.get("deck")
.setSelectable(1);
gameState.currentPlayer().hand().setSelectable(true);
while(!(gameState.getValidMove(gameState.cardPiles.get("deck")
,gameState.currentPlayer().hand(),"").isMoved()  || gameState.getValidMove(gameState.currentPlayer().hand(),gameState.cardPiles.get("middlePile")
,"canPlay").isMoved() )){}

        gameState.clearHumanPlayerState();
      } else {
        // computer player code 
boolean cardPlayed = false;
gameState.booleans.put("cardPlayed",false);
CardPile __Pile1463currentCard= new CardPile(gameState.currentPlayer().hand());
for (Card currentCard : __Pile1463currentCard.getArrayList()){
        if(gameState.booleans.get("cardPlayed")
 == false){
        if(currentCard.getRankInt() == gameState.numbers.get("currentRank")
 || currentCard.getSuitInt() == gameState.numbers.get("currentSuit")
){
        
        CardPileUtil.move(currentCard, gameState.currentPlayer().hand(), gameState.cardPiles.get("middlePile")
);
        frame.console.printToConsole(Console.OutputType.USER, gameState.currentPlayer(), " plays ", currentCard);
        gameState.booleans.put("cardPlayed",true);

        gameState.numbers.put("currentSuit",currentCard.getSuitInt());

        gameState.numbers.put("currentRank",currentCard.getRankInt());


}
else if(gameState.currentPlayer().hand().size() > 1 && currentCard.getRankInt() == 8){
        
        CardPileUtil.move(currentCard, gameState.currentPlayer().hand(), gameState.cardPiles.get("middlePile")
);
        frame.console.printToConsole(Console.OutputType.USER, gameState.currentPlayer(), " plays ", currentCard);
        gameState.booleans.put("cardPlayed",true);

        gameState.numbers.put("currentSuit",gameState.currentPlayer().hand().getTopCard().getSuitInt());

        gameState.numbers.put("currentRank",currentCard.getRankInt());


}


}

}
if(gameState.booleans.get("cardPlayed")
 == false){
        if(gameState.cardPiles.get("deck")
.size() == 0){
        
        CardPileUtil.move(gameState.cardPiles.get("middlePile")
.getTopCard(), gameState.cardPiles.get("middlePile")
, gameState.cardPiles.get("topCardPile")
);
        
        CardPileUtil.moveAll(gameState.cardPiles.get("middlePile")
, gameState.cardPiles.get("deck")
);
        gameState.cardPiles.get("deck")
.shuffle();

        
        CardPileUtil.moveAll(gameState.cardPiles.get("topCardPile")
, gameState.cardPiles.get("middlePile")
);

}

        
        CardPileUtil.move(1, gameState.cardPiles.get("deck")
, gameState.currentPlayer().hand());
        Card currentCard = gameState.currentPlayer().hand().getTopCard();
        if(gameState.booleans.get("cardPlayed")
 == false){
        if(currentCard.getRankInt() == gameState.numbers.get("currentRank")
 || currentCard.getSuitInt() == gameState.numbers.get("currentSuit")
){
        
        CardPileUtil.move(currentCard, gameState.currentPlayer().hand(), gameState.cardPiles.get("middlePile")
);
        gameState.booleans.put("cardPlayed",true);

        gameState.numbers.put("currentSuit",currentCard.getSuitInt());

        gameState.numbers.put("currentRank",currentCard.getRankInt());


}
else if(gameState.currentPlayer().hand().size() > 1 && currentCard.getRankInt() == 8){
        
        CardPileUtil.move(currentCard, gameState.currentPlayer().hand(), gameState.cardPiles.get("middlePile")
);
        gameState.booleans.put("cardPlayed",true);

        gameState.numbers.put("currentSuit",gameState.currentPlayer().hand().getTopCard().getSuitInt());

        gameState.numbers.put("currentRank",currentCard.getRankInt());

        frame.console.printToConsole(Console.OutputType.USER, "The current suit is");
        frame.console.printToConsole(Console.OutputType.USER, gameState.numbers.get("currentSuit")
);

}


}


}

      }

      // win condition 

      if (gameState.currentPlayer().hand().size() == 0) {
        break;
      }

      // Increment currentPlayer for next turn 
      gameState.incrementPlayer();
      frame.redraw();
    }

    // End Block 


    // Game Finished 
  }

public static boolean canPlay(){
CardPile __Pile2484card= new CardPile(gameState.currentPlayer().hand().getSelection());
for (Card card : __Pile2484card.getArrayList()){
  if(card.getRankInt()!=gameState.numbers.get("currentRank")
 && card.getSuitInt()!=gameState.numbers.get("currentSuit")
 && card.getRankInt()!=8){
  return false;


}

  if(card.getRankInt() == 8){
  java.util.ArrayList<String> options = new java.util.ArrayList<String>();
options.add("hearts");
options.add("diamonds");
options.add("clubs");
options.add("spades");
ShuffleJava.gui_2.Popup popup = new ShuffleJava.gui_2.Popup("What suit do you pick?", options);
int result = popup.show();System.out.println(result);gameState.numbers.put("currentSuit",result);

}

}



return true;
}


  public static void pause(int seconds) {
    Date start = new Date();
    Date end = new Date();
    while (end.getTime() - start.getTime() < seconds * 1000) {
      end = new Date();
    }

  }



  public static void main(String[] args) {
    try {
      executeGame();
    } catch (ShuffleException e) {
      System.err.println("Game Error: " + e.getMessage());
    }
  }
}
