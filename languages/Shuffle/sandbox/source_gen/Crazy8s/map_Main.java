package Crazy8s;

/*Generated by MPS */

import ShuffleJava.runtime.GameState;
import ShuffleJava.runtime.ShuffleException;
import ShuffleJava.runtime.Card;
import ShuffleJava.runtime.CardPile;
import ShuffleJava.gui_2.StackedPileDisplay;
import ShuffleJava.gui_2.CascadingPileDisplay;
import ShuffleJava.gui_2.HiddenPileDisplay;
import ShuffleJava.gui_2.ShuffleFrame;
import ShuffleJava.runtime.Printer;
import ShuffleJava.runtime.CardPileUtil;

public class map_Main {

  private static GameState gameState;

  public static void executeGame() throws ShuffleException {
    Card __debug_include_Card;
    CardPile __debug_include_piledisplay;
    StackedPileDisplay __debug_include_SPD;
    CascadingPileDisplay __debug_include_CPD;
    HiddenPileDisplay __debug_include_HPD;

    gameState = new GameState();
    ShuffleFrame frame = new ShuffleFrame(gameState);

    // state variables 
    Printer printer = new Printer(gameState);

    // Setup Block 
    CardPile __deck = new CardPile("standard_deck");
    __deck.add( new Card ( "ace","spades" ));
    __deck.add( new Card ( "two","spades" ));
    __deck.add( new Card ( "three","spades" ));
    __deck.add( new Card ( "four","spades" ));
    __deck.add( new Card ( "five","spades" ));
    __deck.add( new Card ( "six","spades" ));
    __deck.add( new Card ( "seven","spades" ));
    __deck.add( new Card ( "eight","spades" ));
    __deck.add( new Card ( "nine","spades" ));
    __deck.add( new Card ( "ten","spades" ));
    __deck.add( new Card ( "jack","spades" ));
    __deck.add( new Card ( "queen","spades" ));
    __deck.add( new Card ( "king","spades" ));
    __deck.add( new Card ( "ace","hearts" ));
    __deck.add( new Card ( "two","hearts" ));
    __deck.add( new Card ( "three","hearts" ));
    __deck.add( new Card ( "four","hearts" ));
    __deck.add( new Card ( "five","hearts" ));
    __deck.add( new Card ( "six","hearts" ));
    __deck.add( new Card ( "seven","hearts" ));
    __deck.add( new Card ( "eight","hearts" ));
    __deck.add( new Card ( "nine","hearts" ));
    __deck.add( new Card ( "ten","hearts" ));
    __deck.add( new Card ( "jack","hearts" ));
    __deck.add( new Card ( "queen","hearts" ));
    __deck.add( new Card ( "king","hearts" ));
    __deck.add( new Card ( "ace","clubs" ));
    __deck.add( new Card ( "two","clubs" ));
    __deck.add( new Card ( "three","clubs" ));
    __deck.add( new Card ( "four","clubs" ));
    __deck.add( new Card ( "five","clubs" ));
    __deck.add( new Card ( "six","clubs" ));
    __deck.add( new Card ( "seven","clubs" ));
    __deck.add( new Card ( "eight","clubs" ));
    __deck.add( new Card ( "nine","clubs" ));
    __deck.add( new Card ( "ten","clubs" ));
    __deck.add( new Card ( "jack","clubs" ));
    __deck.add( new Card ( "queen","clubs" ));
    __deck.add( new Card ( "king","clubs" ));
    __deck.add( new Card ( "ace","diamonds" ));
    __deck.add( new Card ( "two","diamonds" ));
    __deck.add( new Card ( "three","diamonds" ));
    __deck.add( new Card ( "four","diamonds" ));
    __deck.add( new Card ( "five","diamonds" ));
    __deck.add( new Card ( "six","diamonds" ));
    __deck.add( new Card ( "seven","diamonds" ));
    __deck.add( new Card ( "eight","diamonds" ));
    __deck.add( new Card ( "nine","diamonds" ));
    __deck.add( new Card ( "ten","diamonds" ));
    __deck.add( new Card ( "jack","diamonds" ));
    __deck.add( new Card ( "queen","diamonds" ));
    __deck.add( new Card ( "king","diamonds" ));
gameState.setNumberPlayers(4);__deck.shuffle();

    CardPileUtil.move(8, __deck, gameState.player(1).hand());
    CardPileUtil.move(8, __deck, gameState.player(2).hand());
    CardPileUtil.move(8, __deck, gameState.player(3).hand());
    CardPileUtil.move(8, __deck, gameState.player(4).hand());CardPile deck = new CardPile("deck", false);
StackedPileDisplay deck_disp = new StackedPileDisplay(deck);
frame.getCanvas().addShuffleComponent(deck_disp,"E",1);
gameState.cardPiles.put("deck",deck);
CardPile middlePile = new CardPile("middlePile", true);
StackedPileDisplay middlePile_disp = new StackedPileDisplay(middlePile);
frame.getCanvas().addShuffleComponent(middlePile_disp,"E",2);
gameState.cardPiles.put("middlePile",middlePile);
CardPile topCardPile = new CardPile("topCardPile", true);
HiddenPileDisplay topCardPile_disp = new HiddenPileDisplay(topCardPile);
frame.getCanvas().addShuffleComponent(topCardPile_disp,"B",3);
gameState.cardPiles.put("topCardPile",topCardPile);

    CardPileUtil.move(1, __deck, gameState.cardPiles.get("middlePile"));
    CardPileUtil.moveAll(__deck, gameState.cardPiles.get("deck"));gameState.cardPiles.get("middlePile").setSelectable(true);
gameState.cardPiles.get("deck").setSelectable(1);


String currentSuit = gameState.cardPiles.get("middlePile").getTopCard().getSuit();
gameState.strings.put("currentSuit",gameState.cardPiles.get("middlePile").getTopCard().getSuit());
String currentRank = gameState.cardPiles.get("middlePile").getTopCard().getRank();
gameState.strings.put("currentRank",gameState.cardPiles.get("middlePile").getTopCard().getRank());



    gameState.addHandDisplaysToFrame(frame);

    // make hand displays from player hands  
    frame.redraw();

    // Game Loop 
    while (true) {
      // Perform Player turn code 

      if (gameState.currentPlayer().isHuman()) {
        // human player code 
gameState.cardPiles.get("middlePile").setSelectable(true);
gameState.currentPlayer().hand().setSelectable(1);
gameState.cardPiles.get("middlePile").setSelectable(false);

        gameState.clearHumanPlayerState();
      } else {
        // computer player code 
boolean cardPlayed = false;
gameState.booleans.put("cardPlayed",false);
CardPile __Pile7274currentCard= new CardPile(gameState.currentPlayer().hand());
for (Card currentCard : __Pile7274currentCard.getArrayList()){
        if(gameState.booleans.get("cardPlayed") == false){
        if(currentCard.getRank() == gameState.strings.get("currentRank") || currentCard.getSuit() == gameState.strings.get("currentSuit")){
        
        CardPileUtil.move(currentCard, gameState.currentPlayer().hand(), gameState.cardPiles.get("middlePile"));
        
        gameState.booleans.put("cardPlayed",true);

        gameState.strings.put("currentSuit",currentCard.getSuit());

        gameState.strings.put("currentRank",currentCard.getRank());


}
else if(gameState.currentPlayer().hand().size() > 1 && currentCard.getRank() == "eight"){
        
        CardPileUtil.move(currentCard, gameState.currentPlayer().hand(), gameState.cardPiles.get("middlePile"));
        
        gameState.booleans.put("cardPlayed",true);

        gameState.strings.put("currentSuit",gameState.currentPlayer().hand().getTopCard().getSuit());

        gameState.strings.put("currentRank",currentCard.getRank());


}


}

}
if(gameState.booleans.get("cardPlayed") == false){
        if(gameState.cardPiles.get("deck").size() == 0){
        
        CardPileUtil.move(gameState.cardPiles.get("middlePile").getTopCard(), gameState.cardPiles.get("middlePile"), gameState.cardPiles.get("topCardPile"));
        
        CardPileUtil.moveAll(gameState.cardPiles.get("middlePile"), gameState.cardPiles.get("deck"));
        gameState.cardPiles.get("deck").shuffle();

        
        CardPileUtil.moveAll(gameState.cardPiles.get("topCardPile"), gameState.cardPiles.get("middlePile"));

}

        
        CardPileUtil.move(1, gameState.cardPiles.get("deck"), gameState.currentPlayer().hand());
        Card currentCard = gameState.currentPlayer().hand().getTopCard();
        if(gameState.booleans.get("cardPlayed") == false){
        if(currentCard.getRank() == gameState.strings.get("currentRank") || currentCard.getSuit() == gameState.strings.get("currentSuit")){
        
        CardPileUtil.move(currentCard, gameState.currentPlayer().hand(), gameState.cardPiles.get("middlePile"));
        gameState.booleans.put("cardPlayed",true);

        gameState.strings.put("currentSuit",currentCard.getSuit());

        gameState.strings.put("currentRank",currentCard.getRank());


}
else if(gameState.currentPlayer().hand().size() > 1 && currentCard.getRank() == "eight"){
        
        CardPileUtil.move(currentCard, gameState.currentPlayer().hand(), gameState.cardPiles.get("middlePile"));
        gameState.booleans.put("cardPlayed",true);

        gameState.strings.put("currentSuit",gameState.currentPlayer().hand().getTopCard().getSuit());

        gameState.strings.put("currentRank",currentCard.getRank());


}


}


}

      }

      // win condition 
      if (gameState.currentPlayer().hand().size() == 0) {
        break;
      }

      // Increment currentPlayer for next turn 
      gameState.incrementPlayer();
      frame.redraw();
    }

    // Game Finished 
    System.out.println("Player " + (gameState.currentPlayer().id() + 1) + " WINS!");
  }

public static boolean canPlay(){
CardPile __Pile9440card= new CardPile(gameState.currentPlayer().hand().getSelection());
for (Card card : __Pile9440card.getArrayList()){
  if(card.getRank()!=gameState.strings.get("currentRank") || card.getSuit()!=gameState.strings.get("currentSuit") || card.getRank()!="eight"){
  return false;


}

  if(card.getRank() == "eight"){
  java.util.ArrayList<String> options = new java.util.ArrayList<String>();
options.add("hearts");
options.add("diamonds");
options.add("clubs");
options.add("spades");
ShuffleJava.gui_2.Popup popup = new ShuffleJava.gui_2.Popup("What suit do you pick?", options);
gameState.strings.put(gameState.strings.get("currentSuit"),options.get(popup.show()));


}

}
return true;
}


  public static void main(String[] args) {
    try {
      executeGame();
    } catch (ShuffleException e) {
      System.err.println("Game Error: " + e.getMessage());
    }
  }
}
