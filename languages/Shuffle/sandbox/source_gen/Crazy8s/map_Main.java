package Crazy8s;

/*Generated by MPS */

import ShuffleJava.runtime.ShuffleException;
import ShuffleJava.runtime.Card;
import ShuffleJava.runtime.GameState;
import ShuffleJava.runtime.Printer;
import ShuffleJava.runtime.CardPile;
import ShuffleJava.runtime.CardPileUtil;
import ShuffleJava.gui.ShuffleFrame;

public class map_Main {


  public static void executeGame() throws ShuffleException {
    Card __dummyCard;
    // state variables 
    GameState gameState = new GameState();
    Printer printer = new Printer(gameState);

    // Setup Block 
    CardPile __deck = new CardPile("standard_deck", "E", 5);

    __deck.add( new Card ( "ace","spades" ));
    __deck.add( new Card ( "two","spades" ));
    __deck.add( new Card ( "three","spades" ));
    __deck.add( new Card ( "four","spades" ));
    __deck.add( new Card ( "five","spades" ));
    __deck.add( new Card ( "six","spades" ));
    __deck.add( new Card ( "seven","spades" ));
    __deck.add( new Card ( "eight","spades" ));
    __deck.add( new Card ( "nine","spades" ));
    __deck.add( new Card ( "ten","spades" ));
    __deck.add( new Card ( "jack","spades" ));
    __deck.add( new Card ( "queen","spades" ));
    __deck.add( new Card ( "king","spades" ));
    __deck.add( new Card ( "ace","hearts" ));
    __deck.add( new Card ( "two","hearts" ));
    __deck.add( new Card ( "three","hearts" ));
    __deck.add( new Card ( "four","hearts" ));
    __deck.add( new Card ( "five","hearts" ));
    __deck.add( new Card ( "six","hearts" ));
    __deck.add( new Card ( "seven","hearts" ));
    __deck.add( new Card ( "eight","hearts" ));
    __deck.add( new Card ( "nine","hearts" ));
    __deck.add( new Card ( "ten","hearts" ));
    __deck.add( new Card ( "jack","hearts" ));
    __deck.add( new Card ( "queen","hearts" ));
    __deck.add( new Card ( "king","hearts" ));
    __deck.add( new Card ( "ace","clubs" ));
    __deck.add( new Card ( "two","clubs" ));
    __deck.add( new Card ( "three","clubs" ));
    __deck.add( new Card ( "four","clubs" ));
    __deck.add( new Card ( "five","clubs" ));
    __deck.add( new Card ( "six","clubs" ));
    __deck.add( new Card ( "seven","clubs" ));
    __deck.add( new Card ( "eight","clubs" ));
    __deck.add( new Card ( "nine","clubs" ));
    __deck.add( new Card ( "ten","clubs" ));
    __deck.add( new Card ( "jack","clubs" ));
    __deck.add( new Card ( "queen","clubs" ));
    __deck.add( new Card ( "king","clubs" ));
    __deck.add( new Card ( "ace","diamonds" ));
    __deck.add( new Card ( "two","diamonds" ));
    __deck.add( new Card ( "three","diamonds" ));
    __deck.add( new Card ( "four","diamonds" ));
    __deck.add( new Card ( "five","diamonds" ));
    __deck.add( new Card ( "six","diamonds" ));
    __deck.add( new Card ( "seven","diamonds" ));
    __deck.add( new Card ( "eight","diamonds" ));
    __deck.add( new Card ( "nine","diamonds" ));
    __deck.add( new Card ( "ten","diamonds" ));
    __deck.add( new Card ( "jack","diamonds" ));
    __deck.add( new Card ( "queen","diamonds" ));
    __deck.add( new Card ( "king","diamonds" ));
gameState.setNumberPlayers(4);__deck.shuffle();

    CardPileUtil.move(8, __deck, gameState.player(1).hand());
    CardPileUtil.move(8, __deck, gameState.player(2).hand());
    CardPileUtil.move(8, __deck, gameState.player(3).hand());
    CardPileUtil.move(8, __deck, gameState.player(4).hand());CardPile deck = new CardPile("deck", false);
CardPile middlePile = new CardPile("middlePile", true);
CardPile topCardPile = new CardPile("topCardPile", true);

    CardPileUtil.move(1, __deck, middlePile);
    CardPileUtil.moveAll(__deck, deck);String currentSuit = middlePile.getTopCard().getSuit();
String currentRank = middlePile.getTopCard().getRank();


    // Game Loop 
    while (true) {
      // Perform Player turn code 
boolean cardPlayed = false;
CardPile __Pile2795currentCard= new CardPile(gameState.currentPlayer().hand());
for (Card currentCard : __Pile2795currentCard.getArrayList()){
      if(cardPlayed == false){
      if(currentCard.getRank() == currentRank || currentCard.getSuit() == currentSuit){
      
      CardPileUtil.move(currentCard, gameState.currentPlayer().hand(), middlePile);
      cardPlayed = true;

      currentSuit = currentCard.getSuit();

      currentRank = currentCard.getRank();


}
else if(gameState.currentPlayer().hand().size() > 1 && currentCard.getRank() == "eight"){
      
      CardPileUtil.move(currentCard, gameState.currentPlayer().hand(), middlePile);
      cardPlayed = true;

      currentSuit = gameState.currentPlayer().hand().getTopCard().getSuit();

      currentRank = currentCard.getRank();


}


}

}
if(cardPlayed == false){
      if(deck.size() == 0){
      
      CardPileUtil.move(middlePile.getTopCard(), middlePile, topCardPile);
      
      CardPileUtil.moveAll(middlePile, deck);
      deck.shuffle();

      
      CardPileUtil.moveAll(topCardPile, middlePile);

}

      
      CardPileUtil.move(1, deck, gameState.currentPlayer().hand());
      Card currentCard = gameState.currentPlayer().hand().getTopCard();
      if(cardPlayed == false){
      if(currentCard.getRank() == currentRank || currentCard.getSuit() == currentSuit){
      
      CardPileUtil.move(currentCard, gameState.currentPlayer().hand(), middlePile);
      cardPlayed = true;

      currentSuit = currentCard.getSuit();

      currentRank = currentCard.getRank();


}
else if(gameState.currentPlayer().hand().size() > 1 && currentCard.getRank() == "eight"){
      
      CardPileUtil.move(currentCard, gameState.currentPlayer().hand(), middlePile);
      cardPlayed = true;

      currentSuit = gameState.currentPlayer().hand().getTopCard().getSuit();

      currentRank = currentCard.getRank();


}


}


}


      // win condition 
      if (gameState.currentPlayer().hand().size() == 0) {
        break;
      }

      // Increment currentPlayer for next turn 
      gameState.incrementPlayer();
    }

    // Game Finished 
    System.out.println("Player " + (gameState.currentPlayer().id() + 1) + " WINS!");
  }



  public static void main(String[] args) {
    try {
      ShuffleFrame frame = new ShuffleFrame();
      executeGame();
    } catch (ShuffleException e) {
      System.err.println("Game Error: " + e.getMessage());
    }
  }
}
