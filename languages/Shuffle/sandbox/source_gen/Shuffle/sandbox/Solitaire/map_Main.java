package Shuffle.sandbox.Solitaire;

/*Generated by MPS */

import ShuffleJava.runtime.GameState;
import ShuffleJava.gui_2.ShuffleFrame;
import ShuffleJava.runtime.ShuffleException;
import ShuffleJava.runtime.Card;
import ShuffleJava.runtime.CardPile;
import ShuffleJava.runtime.Button;
import ShuffleJava.gui_2.ButtonDisplay;
import ShuffleJava.gui_2.StackedPileDisplay;
import ShuffleJava.gui_2.CascadingPileDisplay;
import ShuffleJava.gui_2.HiddenPileDisplay;
import ShuffleJava.gui_2.Console;
import ShuffleJava.runtime.Printer;
import ShuffleJava.runtime.CardPileUtil;
import java.util.Date;

public class map_Main {

  private static GameState gameState;
  private static ShuffleFrame frame;

  public static void executeGame() throws ShuffleException {
    Card __debug_include_Card;
    CardPile __debug_include_piledisplay;
    Button __debug_include_button;
    ButtonDisplay __debug_iclude_BD;
    StackedPileDisplay __debug_include_SPD;
    CascadingPileDisplay __debug_include_CPD;
    HiddenPileDisplay __debug_include_HPD;
    Console.OutputType __debug_include_OT;

    gameState = new GameState(map_Main.class.getName());
    frame = new ShuffleFrame(gameState);
    gameState.setConsole(frame.console);

    // state variables 

    Printer printer = new Printer(gameState);

    // Setup Block 


    CardPile __deck = new CardPile("standard_deck");
    __deck.add( new Card ( 1,1 ));
    __deck.add( new Card ( 1,1 ));
    __deck.add( new Card ( 1,1 ));
    __deck.add( new Card ( 1,1 ));
    __deck.add( new Card ( 1,1 ));
    __deck.add( new Card ( 1,1 ));
    __deck.add( new Card ( 1,1 ));
    __deck.add( new Card ( 1,1 ));
    __deck.add( new Card ( 1,1 ));
    __deck.add( new Card ( 1,1 ));
    __deck.add( new Card ( 1,1 ));
    __deck.add( new Card ( 1,1 ));
    __deck.add( new Card ( 1,1 ));
    __deck.add( new Card ( 1,1 ));
    __deck.add( new Card ( 1,1 ));
    __deck.add( new Card ( 1,1 ));
    __deck.add( new Card ( 1,1 ));
    __deck.add( new Card ( 1,1 ));
    __deck.add( new Card ( 1,1 ));
    __deck.add( new Card ( 1,1 ));
    __deck.add( new Card ( 1,1 ));
    __deck.add( new Card ( 1,1 ));
    __deck.add( new Card ( 1,1 ));
    __deck.add( new Card ( 1,1 ));
    __deck.add( new Card ( 1,1 ));
    __deck.add( new Card ( 1,1 ));
    __deck.add( new Card ( 1,1 ));
    __deck.add( new Card ( 1,1 ));
    __deck.add( new Card ( 1,1 ));
    __deck.add( new Card ( 1,1 ));
    __deck.add( new Card ( 1,1 ));
    __deck.add( new Card ( 1,1 ));
    __deck.add( new Card ( 1,1 ));
    __deck.add( new Card ( 1,1 ));
    __deck.add( new Card ( 1,1 ));
    __deck.add( new Card ( 1,1 ));
    __deck.add( new Card ( 1,1 ));
    __deck.add( new Card ( 1,1 ));
    __deck.add( new Card ( 1,1 ));
    __deck.add( new Card ( 1,1 ));
    __deck.add( new Card ( 1,1 ));
    __deck.add( new Card ( 1,1 ));
    __deck.add( new Card ( 1,1 ));
    __deck.add( new Card ( 1,1 ));
    __deck.add( new Card ( 1,1 ));
    __deck.add( new Card ( 1,1 ));
    __deck.add( new Card ( 1,1 ));
    __deck.add( new Card ( 1,1 ));
    __deck.add( new Card ( 1,1 ));
    __deck.add( new Card ( 1,1 ));
    __deck.add( new Card ( 1,1 ));
    __deck.add( new Card ( 1,1 ));
__deck.shuffle();
gameState.setNumberPlayers(1);CardPile zero = new CardPile("zero", true);
CascadingPileDisplay zero_disp = new CascadingPileDisplay(zero);
frame.getCanvas().addShuffleComponent(zero_disp,"A",0);
gameState.cardPiles.put("zero",zero);

    CardPileUtil.move(1, __deck, gameState.cardPiles.get("zero")
);
CardPile oneHidden = new CardPile("oneHidden", false);
CascadingPileDisplay oneHidden_disp = new CascadingPileDisplay(oneHidden);
frame.getCanvas().addShuffleComponent(oneHidden_disp,"A",1);
gameState.cardPiles.put("oneHidden",oneHidden);

    CardPileUtil.move(1, __deck, gameState.cardPiles.get("oneHidden")
);CardPile oneShow = new CardPile("oneShow", true);
CascadingPileDisplay oneShow_disp = new CascadingPileDisplay(oneShow);
frame.getCanvas().addShuffleComponent(oneShow_disp,"B",1);
gameState.cardPiles.put("oneShow",oneShow);

    CardPileUtil.move(1, __deck, gameState.cardPiles.get("oneShow")
);
CardPile twoHidden = new CardPile("twoHidden", false);
CascadingPileDisplay twoHidden_disp = new CascadingPileDisplay(twoHidden);
frame.getCanvas().addShuffleComponent(twoHidden_disp,"A",2);
gameState.cardPiles.put("twoHidden",twoHidden);

    CardPileUtil.move(2, __deck, gameState.cardPiles.get("twoHidden")
);CardPile twoShow = new CardPile("twoShow", true);
CascadingPileDisplay twoShow_disp = new CascadingPileDisplay(twoShow);
frame.getCanvas().addShuffleComponent(twoShow_disp,"C",2);
gameState.cardPiles.put("twoShow",twoShow);

    CardPileUtil.move(1, __deck, gameState.cardPiles.get("twoShow")
);
CardPile threeHidden = new CardPile("threeHidden", false);
CascadingPileDisplay threeHidden_disp = new CascadingPileDisplay(threeHidden);
frame.getCanvas().addShuffleComponent(threeHidden_disp,"A",3);
gameState.cardPiles.put("threeHidden",threeHidden);

    CardPileUtil.move(3, __deck, gameState.cardPiles.get("threeHidden")
);CardPile threeShow = new CardPile("threeShow", true);
CascadingPileDisplay threeShow_disp = new CascadingPileDisplay(threeShow);
frame.getCanvas().addShuffleComponent(threeShow_disp,"D",3);
gameState.cardPiles.put("threeShow",threeShow);

    CardPileUtil.move(1, __deck, gameState.cardPiles.get("threeShow")
);
CardPile fourHidden = new CardPile("fourHidden", false);
CascadingPileDisplay fourHidden_disp = new CascadingPileDisplay(fourHidden);
frame.getCanvas().addShuffleComponent(fourHidden_disp,"A",4);
gameState.cardPiles.put("fourHidden",fourHidden);

    CardPileUtil.move(4, __deck, gameState.cardPiles.get("fourHidden")
);CardPile fourShow = new CardPile("fourShow", true);
CascadingPileDisplay fourShow_disp = new CascadingPileDisplay(fourShow);
frame.getCanvas().addShuffleComponent(fourShow_disp,"E",4);
gameState.cardPiles.put("fourShow",fourShow);

    CardPileUtil.move(1, __deck, gameState.cardPiles.get("fourShow")
);
CardPile fiveHidden = new CardPile("fiveHidden", false);
CascadingPileDisplay fiveHidden_disp = new CascadingPileDisplay(fiveHidden);
frame.getCanvas().addShuffleComponent(fiveHidden_disp,"A",5);
gameState.cardPiles.put("fiveHidden",fiveHidden);

    CardPileUtil.move(5, __deck, gameState.cardPiles.get("fiveHidden")
);CardPile fiveShow = new CardPile("fiveShow", true);
CascadingPileDisplay fiveShow_disp = new CascadingPileDisplay(fiveShow);
frame.getCanvas().addShuffleComponent(fiveShow_disp,"F",5);
gameState.cardPiles.put("fiveShow",fiveShow);

    CardPileUtil.move(1, __deck, gameState.cardPiles.get("fiveShow")
);
CardPile sixHidden = new CardPile("sixHidden", false);
CascadingPileDisplay sixHidden_disp = new CascadingPileDisplay(sixHidden);
frame.getCanvas().addShuffleComponent(sixHidden_disp,"A",6);
gameState.cardPiles.put("sixHidden",sixHidden);

    CardPileUtil.move(6, __deck, gameState.cardPiles.get("sixHidden")
);CardPile sixShow = new CardPile("sixShow", true);
CascadingPileDisplay sixShow_disp = new CascadingPileDisplay(sixShow);
frame.getCanvas().addShuffleComponent(sixShow_disp,"G",6);
gameState.cardPiles.put("sixShow",sixShow);

    CardPileUtil.move(1, __deck, gameState.cardPiles.get("sixShow")
);
CardPile spades = new CardPile("spades", true);
StackedPileDisplay spades_disp = new StackedPileDisplay(spades);
frame.getCanvas().addShuffleComponent(spades_disp,"G",0);
gameState.cardPiles.put("spades",spades);
CardPile hearts = new CardPile("hearts", true);
StackedPileDisplay hearts_disp = new StackedPileDisplay(hearts);
frame.getCanvas().addShuffleComponent(hearts_disp,"H",0);
gameState.cardPiles.put("hearts",hearts);
CardPile diamonds = new CardPile("diamonds", true);
StackedPileDisplay diamonds_disp = new StackedPileDisplay(diamonds);
frame.getCanvas().addShuffleComponent(diamonds_disp,"I",0);
gameState.cardPiles.put("diamonds",diamonds);
CardPile clubs = new CardPile("clubs", true);
StackedPileDisplay clubs_disp = new StackedPileDisplay(clubs);
frame.getCanvas().addShuffleComponent(clubs_disp,"J",0);
gameState.cardPiles.put("clubs",clubs);

CardPile deck = new CardPile("deck", false);
StackedPileDisplay deck_disp = new StackedPileDisplay(deck);
frame.getCanvas().addShuffleComponent(deck_disp,"I",2);
gameState.cardPiles.put("deck",deck);
CardPile newCards = new CardPile("newCards", true);
StackedPileDisplay newCards_disp = new StackedPileDisplay(newCards);
frame.getCanvas().addShuffleComponent(newCards_disp,"J",2);
gameState.cardPiles.put("newCards",newCards);



    CardPileUtil.move(1, __deck, gameState.cardPiles.get("newCards")
);
    CardPileUtil.moveAll(__deck, gameState.cardPiles.get("deck")
);




    gameState.addHandDisplaysToFrame(frame);

    // make hand displays from player hands  

    frame.redraw();

    // Game Loop 

    while (true) {
      // Perform Player turn code 

      if (gameState.currentPlayer().isHuman()) {
        // human player code 
if(gameState.cardPiles.get("deck")
.size() == 0){
        
        CardPileUtil.moveAll(gameState.cardPiles.get("newCards")
, gameState.cardPiles.get("deck")
);

}

gameState.cardPiles.get("zero")
.setSelectable(true);
gameState.cardPiles.get("oneShow")
.setSelectable(true);
gameState.cardPiles.get("twoShow")
.setSelectable(true);
gameState.cardPiles.get("threeShow")
.setSelectable(true);
gameState.cardPiles.get("fourShow")
.setSelectable(true);
gameState.cardPiles.get("fiveShow")
.setSelectable(true);
gameState.cardPiles.get("sixShow")
.setSelectable(true);
gameState.cardPiles.get("spades")
.setSelectable(true);
gameState.cardPiles.get("hearts")
.setSelectable(true);
gameState.cardPiles.get("diamonds")
.setSelectable(true);
gameState.cardPiles.get("clubs")
.setSelectable(true);
gameState.cardPiles.get("deck")
.setSelectable(true);
gameState.cardPiles.get("newCards")
.setSelectable(true);

while(!(gameState.getValidMove(gameState.cardPiles.get("deck")
,gameState.cardPiles.get("newCards")
,"").isMoved()  || gameState.getValidMove(gameState.cardPiles.get("zero")
,gameState.cardPiles.get("oneShow")
,"addToShowPile").isMoved()  || gameState.getValidMove(gameState.cardPiles.get("zero")
,gameState.cardPiles.get("twoShow")
,"addToShowPile").isMoved()  || gameState.getValidMove(gameState.cardPiles.get("zero")
,gameState.cardPiles.get("threeShow")
,"addToShowPile").isMoved()  || gameState.getValidMove(gameState.cardPiles.get("zero")
,gameState.cardPiles.get("fourShow")
,"addToShowPile").isMoved()  || gameState.getValidMove(gameState.cardPiles.get("zero")
,gameState.cardPiles.get("fiveShow")
,"addToShowPile").isMoved()  || gameState.getValidMove(gameState.cardPiles.get("zero")
,gameState.cardPiles.get("sixShow")
,"addToShowPile").isMoved()  || gameState.getValidMove(gameState.cardPiles.get("zero")
,gameState.cardPiles.get("twoShow")
,"addToShowPile").isMoved()  || gameState.getValidMove(gameState.cardPiles.get("zero")
,gameState.cardPiles.get("twoShow")
,"addToShowPile").isMoved() )){}

        gameState.clearHumanPlayerState();
      } else {
        // computer player code 

      }

      // win condition 

      if (gameState.cardPiles.get("spades")
.size() == 13 && gameState.cardPiles.get("hearts")
.size() == 13 && gameState.cardPiles.get("hearts")
.size() == 13 && gameState.cardPiles.get("clubs")
.size() == 13) {
        break;
      }

      // Increment currentPlayer for next turn 
      gameState.incrementPlayer();
      frame.redraw();
    }

    // End Block 


    // Game Finished 
  }

public static boolean addToAcePile(){
return true;
}
public static boolean addToShowPile(){
return true;
}


  public static void pause(int seconds) {
    Date start = new Date();
    Date end = new Date();
    while (end.getTime() - start.getTime() < seconds * 1000) {
      end = new Date();
    }

  }



  public static void main(String[] args) {
    try {
      executeGame();
    } catch (ShuffleException e) {
      System.err.println("Game Error: " + e.getMessage());
    }
  }
}
